---
title: "experiments in dispersion"
---

```{r}
## simulate
## lca = log control abundance (intercept of log-link model)
## lfc = log fold chance (beta_1 of log-link model)
simfun <- function(lca, lfc, n=200) {
    dd <- data.frame(f = rep(c("control", "treatment"), n/2))
    X <- model.matrix(~f, data  = dd)
    dd$y <- rpois(n, exp(X %*% c(lca, lfc)))
    dd
}

## summarize: extract standard errors of coefficients
sumfun <- function(data) {
    f <- glm(y~f, family = poisson, data = data)
    return(coef(summary(f))[,"Std. Error"])
}

## set up parameter ranges
simpars <- expand.grid(lca = seq(0, 5, length = 21),
                       lfc = seq(0, 5, length = 21))

## set up data structure for output
ns <- nrow(simpars)
res <- as.data.frame(matrix(rep(NA_real_, 4*ns,
                            ncol = 4,
                            dimnames = list(NULL,
                                            c("lca_mean", "lca_sd",
                                              "lfc_mean", "lfc_sd")))))
## run
set.seed(101)
nsim <- 300
pb <- txtProgressBar(max = ns, style = 3)
for (i in 1:nrow(simpars)) {
    setTxtProgressBar(pb, i)
    ss <- replicate(nsim, sumfun(simfun(simpars[i,1], simpars[i,2])))
    res[i,] <- c(mean(ss["(Intercept)",]),
                 sd(ss["(Intercept)",]),
                 mean(ss["ftreatment",]),
                 sd(ss["ftreatment",]))
}
close(pb)
```

```{r}
library(ggplot2); theme_set(theme_bw())
```

## simulate latent variables

```{r}
library(lme4)
dd <- expand.grid (subject = factor(1:5), taxon = factor(1:10),
                   time = factor(1:3))
dd
y <- simulate(~1 + (0+subject:time|taxon),
              newdata = dd,
              newparams = list(beta = 1,
                               ## these thetas don't really make sense,
                               ## just a placeholder
                               theta = rep(1, 15*16/2)),
              family = MASS::negative.binomial(theta = 2))[[1]]
y
## this doesn't work yet -- need to hack simulation a bit
latent_vals <- simulate(~1 + (0+ taxon|subject:time),
              newdata = dd,
              newparams = list(beta = 1,
                               ## these thetas don't really make sense,
                               ## just a placeholder
                               theta = rep(1, 15*16/2)*1e16,
                               sigma = 1e-16),
              family = gaussian)[[1]]

View(dd)

#Saves me the troub of computing Z
```
